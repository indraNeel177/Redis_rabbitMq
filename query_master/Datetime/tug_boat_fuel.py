from math import atan2, cos, sin, sqrt, radians
import pandas as pd
import numpy as np


g = [[1644583089.0, 22.0315912, 88.088281, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583099.0, 22.0315912, 88.088281, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583109.0, 22.0315912, 88.088281, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583119.0, 22.0315912, 88.088281, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583129.0, 22.0315912, 88.088281, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583139.0, 22.0315912, 88.088281, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583149.0, 22.0315912, 88.088281, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583159.0, 22.0315912, 88.088281, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583169.0, 22.0315912, 88.088281, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583179.0, 22.0315912, 88.088281, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583189.0, 22.0315912, 88.088281, 0.0, 1642.6, 0.0, 3871.4, 4608.0], [1644583199.0, 22.0315912, 88.088281, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583209.0, 22.0315912, 88.088281, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583219.0, 22.0315912, 88.088281, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583229.0, 22.0315912, 88.088281, 0.0, 2142.4, 647.2, 3732.0, 4608.0], [1644583239.0, 22.0315912, 88.088281, 0.0, 7438.1, 3883.5, 3733.1, 4608.0], [1644583249.0, 22.03159, 88.0880715, 0.0, 7439.7, 3887.1, 3734.5, 4608.0], [1644583259.0, 22.03159, 88.0880715, 0.0, 7446.7, 3883.5, 3735.9, 4608.0], [1644583269.0, 22.03159, 88.0880715, 0.0, 7448.3, 3883.5, 3738.0, 4608.0], [1644583279.0, 22.03159, 88.0880715, 0.0, 7451.2, 3882.8, 3739.9, 4608.0], [1644583289.0, 22.0315792, 88.0878596, 1.4, 7446.5, 3883.5, 3740.6, 4608.0], [1644583299.0, 22.0315263, 88.0877489, 7.0, 7448.1, 3883.2, 3742.4, 4608.0], [1644583309.0, 22.0313719, 88.0875148, 11.1, 7470.8, 3878.1, 3749.6, 4608.0], [1644583319.0, 22.0311157, 88.0872845, 13.2, 7463.9, 3878.4, 3749.2, 4608.0], [1644583329.0, 22.0308553, 88.0870276, 14.4, 7470.8, 3869.4, 3753.9, 4608.0], [1644583339.0, 22.0305806, 88.0867671, 15.0, 7449.8, 3869.8, 3755.5, 4608.0], [1644583349.0, 22.0302802, 88.086508, 15.0, 7428.4, 3870.4, 3753.3, 4608.0], [1644583359.0, 22.0299869, 88.0862538, 15.3, 7414.9, 3871.6, 3751.8, 4608.0], [1644583369.0, 22.0296848, 88.0859896, 15.3, 7405.6, 3876.3, 3749.6, 4608.0], [1644583379.0, 22.0294009, 88.0857062, 15.3, 7406.2, 3878.1, 3747.2, 4608.0], [1644583389.0, 22.0291243, 88.0854163, 15.3, 7402.4, 3883.5, 3744.8, 4608.0], [1644583399.0, 22.0288549, 88.0851142, 15.2, 7406.4, 3890.1, 3742.7, 4608.0], [1644583409.0, 22.0286072, 88.0848228, 14.6, 7411.7, 3890.9, 3741.1, 4608.0], [1644583419.0, 22.0283613, 88.0845581, 13.0, 7417.2, 3897.0, 3738.5, 4608.0], [1644583429.0, 22.0281466, 88.0843013, 12.9, 7416.7, 3906.8, 3734.4, 4608.0], [1644583439.0, 22.0279001, 88.0840783, 13.1, 7416.1, 3921.6, 3728.3, 4608.0], [1644583449.0, 22.0276428, 88.083846, 13.2, 7416.5, 3931.6, 3722.3, 4608.0], [1644583459.0, 22.0273972, 88.0836095, 12.3, 7440.5, 3941.0, 3719.3, 4608.0], [1644583469.0, 22.027184, 88.0834025, 10.7, 7464.4, 3945.8, 3717.7, 4608.0], [1644583479.0, 22.0269647, 88.0832296, 9.6, 7489.8, 3950.6, 3717.4, 4608.0], [1644583489.0, 22.0267862, 88.0831026, 7.1, 7499.3, 3955.1, 3716.6, 4608.0], [1644583499.0, 22.0266521, 88.0830304, 5.7, 7507.5, 3958.4, 3714.9, 4608.0], [1644583509.0, 22.0265214, 88.0829675, 5.5, 7502.9, 3958.4, 3715.2, 4608.0], [1644583519.0, 22.026392, 88.0829098, 5.7, 7502.4, 3962.2, 3714.8, 4608.0], [1644583529.0, 22.0262658, 88.0828496, 5.3, 7498.3, 3961.6, 3715.4, 4608.0], [1644583539.0, 22.0262658, 88.0828496, 0.0, 7497.0, 3960.1, 3716.7, 4608.0], [1644583549.0, 22.0262658, 88.0828496, 0.0, 7489.7, 3955.0, 3719.0, 4608.0], [1644583559.0, 22.0260897, 88.082785, 0.0, 7487.2, 3954.5, 3721.1, 4608.0], [1644583569.0, 22.0260897, 88.082785, 0.0, 7480.2, 3949.3, 3723.3, 4608.0], [1644583579.0, 22.0260897, 88.082785, 0.0, 7471.7, 3948.4, 3725.3, 4608.0], [1644583589.0, 22.0260897, 88.082785, 0.0, 7463.1, 3943.3, 3726.8, 4608.0], [1644583599.0, 22.0260897, 88.082785, 0.0, 7454.9, 3938.3, 3728.8, 4608.0], [1644583609.0, 22.0260897, 88.082785, 0.0, 7454.9, 3937.0, 3730.6, 4608.0], [1644583619.0, 22.0260897, 88.082785, 0.0, 7447.4, 3928.2, 3733.2, 4608.0], [1644583629.0, 22.0260897, 88.082785, 0.0, 7433.2, 3923.6, 3734.7, 4608.0], [1644583639.0, 22.0260897, 88.082785, 0.0, 7418.2, 3919.0, 3736.4, 4608.0], [1644583649.0, 22.0260897, 88.082785, 0.0, 7400.7, 3918.3, 3736.1, 4608.0], [1644583659.0, 22.0260897, 88.082785, 0.0, 7388.3, 3914.7, 3734.7, 4608.0], [1644583669.0, 22.0260897, 88.082785, 0.0, 7378.0, 3912.6, 3733.5, 4608.0], [1644583679.0, 22.0260897, 88.082785, 0.0, 7373.3, 3910.3, 3732.7, 4608.0], [1644583689.0, 22.0260897, 88.082785, 0.0, 7364.8, 3905.8, 3732.7, 4608.0], [1644583699.0, 22.0260897, 88.082785, 0.0, 7361.3, 3902.2, 3732.7, 4608.0], [1644583709.0, 22.0260897, 88.082785, 0.0, 7357.3, 3899.5, 3732.4, 4608.0], [1644583719.0, 22.0260897, 88.082785, 0.0, 7353.5, 3899.5, 3731.6, 4608.0], [1644583723.0, 22.0260897, 88.082785, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583725.0, 22.0260897, 88.082785, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583729.0, 22.0260897, 88.082785, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583739.0, 22.0260897, 88.082785, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583749.0, 22.0260897, 88.082785, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583759.0, 22.0260897, 88.082785, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583769.0, 22.0260897, 88.082785, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583779.0, 22.0260897, 88.082785, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583789.0, 22.0260897, 88.082785, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583799.0, 22.0260897, 88.082785, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583809.0, 22.0260897, 88.082785, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583819.0, 22.0260897, 88.082785, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583829.0, 22.0260897, 88.082785, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583839.0, 22.0260897, 88.082785, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583849.0, 22.0260897, 88.082785, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583859.0, 22.0260897, 88.082785, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583869.0, 22.0260897, 88.082785, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583879.0, 22.0260897, 88.082785, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583889.0, 22.0260897, 88.082785, 0.0, 0.0, 0.0, 0.0, 0.0], [1644583899.0, 22.0260897, 88.082785, 0.0, 0.0, 0.0, 0.0, 0.0]]


# gt = pd.read_csv("query_master/Datetime/s.csv")

# ht = []

# for live_img in gt.index:
#     a = gt.at[live_img, 'a']
#     b = gt.at[live_img, 'b']
#     c = gt.at[live_img, 'c']
#     d = gt.at[live_img, 'd']
#     ht.append([a,b,c,d])




# print(gt[:1])



def sort_fun(g):
    return sorted(g, key=lambda x:x[0])

def distance_value_loop(g):
    g = sort_fun(g=g)
    primary_lat_long =0
    secondary_lat_long =1
    distance = 0
    for value in range(len(g)):
        try:
            distance += distance_in_km(start_latitude=g[primary_lat_long][1],start_longitude=g[primary_lat_long][2], end_latitude=g[secondary_lat_long][1], end_longitude=g[secondary_lat_long][2])
        except Exception:
            break
        primary_lat_long +=1
        secondary_lat_long +=1
    return distance


def distance_in_km(start_latitude, start_longitude, end_latitude, end_longitude):
    try:
        radius_of_earth = 6373.0
        dlng = radians(end_longitude) - radians(start_longitude)
        dlat = radians(end_latitude) - radians(start_latitude)
        a = sin(dlat / 2) ** 2 + cos(start_latitude) * cos(end_latitude) * sin(dlng / 2) ** 2
        c = 2 * atan2(sqrt(a), sqrt(1 - a))
        distance = radius_of_earth * c
        return distance
    except (ValueError, IndexError, TypeError):
        return 

def needed_item(g):
    l = [x for x in g if len(x) == 8 and sum(x[4::])]
    # print(len(l), len(ht))
    # for count,x in enumerate(l):
    #     x[4::] = ht[count]
    # print(l)
    for x in l:
        print(x)
    l = sort_fun(g=l)
    s_q = sum(l[0][4::])
    e_q =sum(l[-1][4::])
    print(s_q, e_q, s_q-e_q)
    fule = int(s_q) - int(e_q)
    return l[0][4::], l[-1][4::], s_q, e_q, fule, l

def query(stq,enq,trip_id,tank_id,boat_id,sensor_id):
    tan = [14,15,16,17]
    sen = [19,16,17,18]
    values = (boat_id,trip_id,sen[sensor_id],tan[tank_id],stq,enq,abs(int(stq)-int(enq)),"Debit")
    sql = '''Insert INTO tank_utilization  (boat_id,trip_id,sensor_id,tank_id,start_fuel_ltr,end_fuel_ltr,fuel_consumed_ltr,level_type) VALUES {}'''.format(values)
    print(sql)
    print()

sta_val, end_val, sq, eq, fuel, l = needed_item(g=g)
print("start valuw {} end value {} and sq {} and eq {}  and fuel {}".format(sta_val, end_val, sq, eq, fuel))
print(distance_value_loop(g=g))

for x in range(len(sta_val)):
    query(stq=sta_val[x],enq=end_val[x],trip_id=6059,tank_id=x,sensor_id=x,boat_id=1005)

tank_mapping =  {'HDK_HDK_TUGB_0002': {'1,5': {'tank_name': 'Reserve Tank 01', 'tank_capacity': 27700, 'tank_id': 5, 'sensor_id': 14}, 
'2': {'tank_name': 'Reserve Tank 02', 'tank_capacity': 27700, 'tank_id': 6, 'sensor_id': 6},
 '3': {'tank_name': 'Service Tank 01', 'tank_capacity': 5000, 'tank_id': 8, 'sensor_id': 8},
  '4': {'tank_name': 'Service Tank 02', 'tank_capacity': 5000, 'tank_id': 9, 'sensor_id': 9}}, 
  'HDK_HDK_TUGB_0010': {'1,5': {'tank_name': 'Reserve Tank 01', 'tank_capacity': 27700, 'tank_id': 14, 'sensor_id': 19}, 
  '2': {'tank_name': 'Reserve Tank 02', 'tank_capacity': 27700, 'tank_id': 15, 'sensor_id': 16}, 
  '3': {'tank_name': 'Service Tank 01', 'tank_capacity': 5000, 'tank_id': 16, 'sensor_id': 17},
   '4': {'tank_name': 'Service Tank 02', 'tank_capacity': 5000, 'tank_id': 17, 'sensor_id': 18}}}

l = np.array(l)


z = [tank for tank in tank_mapping['HDK_HDK_TUGB_0010']]
z_1 = [*tank_mapping['HDK_HDK_TUGB_0010'].keys()]

print(z_1)

sw_e = l[0][4::]
ew_e = l[-1][4::]

f = sw_e-ew_e
for x in range(len(z)):
    fuel_consumed = f[x]
    print(sw)
    tank_id = tank_mapping['HDK_HDK_TUGB_0010'][z[x]]["tank_id"]
    sensor_id = tank_mapping['HDK_HDK_TUGB_0010'][z[x]]["sensor_id"]
    amount = "Debit" if fuel_consumed >= 0 else "Credit"
    print(fuel_consumed,tank_id,sensor_id,amount)

    






